% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/string_tools.R
\name{str_clean}
\alias{str_clean}
\title{Cleans a character vector from multiple patterns}
\usage{
str_clean(
  x,
  ...,
  rep = "",
  pipe = " => ",
  sep = ",[ \\n\\t]+",
  ignore.case = FALSE,
  fixed = FALSE,
  word = FALSE,
  total = FALSE
)
}
\arguments{
\item{x}{A character vector.}

\item{...}{Character scalars representing patterns. A pattern is of the form
"flags/pat1, pat2 => replacement". This means that patterns 'pat1' and 'pat2' will be replaced
with the string 'replacement'. By default patterns are comma separated and the replacement comes
after a ' => ' (see args \code{sep} and \code{pipe} to change this). By default the replacement is the empty string
(so "pat1, pat2" \emph{removes} the patterns).
Available flags are: 'word' (add word boundaries), 'ignore' (the case), 'fixed' (no regex), and 'total'.
The flag \code{total} leads to a \emph{total replacement} of the string if the pattern is found. Use flags
with comma separation ("word, total/pat") or use only their initials ("wt/pat").
Starting with an '@' leads to operations in [\link{str_op}]. Ex: "@ascii, l, ws" leads to turning
the string into ASCII, lower the case and normalize white spaces (see help of [\link{str_ops}]).}
}
\value{
The main usage returns a character vector of the same length as the vector in input.
Note, however, that since you can apply arbitrary [\link{str_op}] operations, the length and type
of the final vector may depend on those (if they are used).
}
\description{
Recursively cleans a character vector from several patterns. Quickly handle the
tedious task of data cleaning by taking advantage of the syntax.
You can also apply all sorts of cleaning operations by summoning [\link{str_op}] operations.
}
\examples{

x = c("hello world  ", "it's 5 am....")

# we clean the o's and the points (we use 'fixed' to trigger fixed-search)
str_clean(x, c("o", "f/."))
# equivalently
str_clean(x, "fixed / o, .")
# equivalently
str_clean(x, "o, .", fixed = TRUE)
# equivalently
str_clean(x, "o", ".", fixed = TRUE)

#
# chaining operations: example using cars
#

cars = row.names(mtcars)
new = str_clean(cars, 
           # replace strings containing "Maz" with Mazda
           "total / Maz => Mazda", 
           # replace the word 'Merc' with Mercedes
           "wi/merc => Mercedes",
           # replace strings containing "Merc" and a digit followed with an 'S'
           "t/Merc & \\\\dS => Mercedes S!",
           # put tolower case, remove isolated characters and normalize white spaces
           "@l, ws.isolated")

cbind(cars, new)


}
